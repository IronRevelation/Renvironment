{"version":3,"sources":["components/AddButton.tsx","components/AddMoneyForm.tsx","components/MySnackbars.tsx","components/MoneyManager.tsx","components/App.tsx","index.tsx"],"names":["ThemedButton","withStyles","root","backgroundColor","color","Button","AddButton","props","variant","startIcon","Add","disableElevation","onClick","disabled","ThemedTextField","borderColor","TextField","AddMoneyForm","useState","NaN","moneyToAdd","setMoneyToAdd","err","isNaN","type","label","placeholder","inputProps","min","onKeyDown","e","key","InputLabelProps","shrink","error","onChange","parseFloat","target","value","style","paddingTop","ErrSnackbar","Snackbar","open","openCfg","autoHideDuration","onClose","Alert","severity","message","SuccessSnackbar","atLeastTwoDigitsRequired","val","toFixed","Math","max","toString","split","length","addMoney","a","fetch","method","res","ok","Error","json","MoneyManager","disabledForms","setDisabledForms","openErrSnackbar","setOpenErrSnackbar","openSuccessSnackbar","setOpenSuccessSnackbar","validValToAdd","then","newMoney","updateMoney","catch","finally","window","htmlentities","encode","str","buf","i","unshift","charCodeAt","join","decode","replace","match","dec","String","fromCharCode","money","JSON","stringify","date","Date","toISOString","defaultMoney","parse","replaceAll","App","setMoney","newMon","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4bb8604.chunk.js","sourcesContent":["import React from \"react\";\nimport { Add } from \"@material-ui/icons\";\nimport { Button, withStyles } from \"@material-ui/core\";\n\nconst ThemedButton = withStyles({\n\troot: {\n\t\tbackgroundColor: \"#009fb7\",\n\t\tcolor: \"#272727\",\n\t},\n})(Button);\n\nconst AddButton: React.FC<{ onClick: () => void; disabled?: boolean }> = (\n\tprops\n) => {\n\treturn (\n\t\t<ThemedButton\n\t\t\tvariant=\"contained\"\n\t\t\tstartIcon={<Add />}\n\t\t\tdisableElevation\n\t\t\tonClick={props.onClick}\n\t\t\tdisabled={props.disabled}\n\t\t>\n\t\t\tAdd value\n\t\t</ThemedButton>\n\t);\n};\n\nexport default AddButton;\n","import React, { useState } from \"react\";\nimport AddButton from \"./AddButton\";\nimport { TextField, withStyles } from \"@material-ui/core\";\n\nconst ThemedTextField = withStyles({\n\troot: {\n\t\t\"& label.Mui-focused\": {\n\t\t\tcolor: \"#009FB7\",\n\t\t},\n\t\t\"& .MuiOutlinedInput-root\": {\n\t\t\t\"&:hover fieldset\": {\n\t\t\t\tborderColor: \"#009FB7\",\n\t\t\t},\n\t\t\t\"&.Mui-focused fieldset\": {\n\t\t\t\tborderColor: \"#009FB7\",\n\t\t\t},\n\t\t},\n\t},\n})(TextField);\n\nconst AddMoneyForm: React.FC<{\n\tdisabled?: boolean;\n\tonClick: (validValToAdd: number) => void;\n}> = (props) => {\n\tconst [moneyToAdd, setMoneyToAdd] = useState(NaN);\n\n\tconst err = isNaN(moneyToAdd) || moneyToAdd <= 0;\n\n\treturn (\n\t\t<div>\n\t\t\t<ThemedTextField\n\t\t\t\tvariant=\"outlined\"\n\t\t\t\ttype=\"number\"\n\t\t\t\tlabel=\"Money to add\"\n\t\t\t\tplaceholder=\"e.g. 3.14\"\n\t\t\t\tinputProps={{\n\t\t\t\t\tmin: \"0\",\n\t\t\t\t\tonKeyDown: (e) => {\n\t\t\t\t\t\tif (e.key === \"Enter\" && !err) {\n\t\t\t\t\t\t\tprops.onClick(moneyToAdd);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\tInputLabelProps={{ shrink: true }}\n\t\t\t\terror={err}\n\t\t\t\tdisabled={props.disabled}\n\t\t\t\tonChange={(e) => setMoneyToAdd(parseFloat(e.target.value))}\n\t\t\t/>\n\t\t\t<div style={{ paddingTop: \"1rem\" }}>\n\t\t\t\t<AddButton\n\t\t\t\t\tdisabled={props.disabled || err}\n\t\t\t\t\tonClick={() => props.onClick(moneyToAdd)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default AddMoneyForm;\n","import React from \"react\";\nimport { Snackbar } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\ntype SnackbarConfig = {\n\topen: boolean;\n\tmessage: string;\n};\n\nexport function ErrSnackbar(props: {\n\topenCfg: SnackbarConfig;\n\tonClose: () => void;\n}) {\n\treturn (\n\t\t<Snackbar\n\t\t\topen={props.openCfg.open}\n\t\t\tautoHideDuration={2500}\n\t\t\tonClose={props.onClose}\n\t\t>\n\t\t\t<Alert severity=\"error\" variant=\"filled\">\n\t\t\t\t{props.openCfg.message}\n\t\t\t</Alert>\n\t\t</Snackbar>\n\t);\n}\n\nexport function SuccessSnackbar(props: {\n\topenCfg: SnackbarConfig;\n\tonClose: () => void;\n}) {\n\treturn (\n\t\t<Snackbar\n\t\t\topen={props.openCfg.open}\n\t\t\tautoHideDuration={2500}\n\t\t\tonClose={props.onClose}\n\t\t>\n\t\t\t<Alert severity=\"success\" variant=\"filled\">\n\t\t\t\t{props.openCfg.message}\n\t\t\t</Alert>\n\t\t</Snackbar>\n\t);\n}\n","import React, { useState } from \"react\";\n// import MoneyComponent from \"./MoneyComponent\";\nimport AddMoneyForm from \"./AddMoneyForm\";\nimport { ErrSnackbar, SuccessSnackbar } from \"./MySnackbars\";\n\nexport type MoneyArray = { date: string; value: number }[];\n\nconst atLeastTwoDigitsRequired = (val: number): string => {\n\treturn val.toFixed(Math.max(2, (val.toString().split(\".\")[1] || []).length));\n};\n\nconst addMoney = async (val: number): Promise<MoneyArray> => {\n\tconst res = await fetch(`/api/add_money/${atLeastTwoDigitsRequired(val)}`, {\n\t\tmethod: \"POST\",\n\t});\n\tif (!res.ok) {\n\t\tthrow new Error(\"RESPONSESTATUSNOTOK\");\n\t} else {\n\t\treturn res.json() as Promise<MoneyArray>;\n\t}\n};\n\nconst MoneyManager: React.FC<{\n\tmoney: MoneyArray;\n\tupdateMoney: (newMoney: MoneyArray) => void;\n}> = (props) => {\n\tconst [disabledForms, setDisabledForms] = useState(false);\n\tconst [openErrSnackbar, setOpenErrSnackbar] = useState({\n\t\topen: false,\n\t\tmessage: \"\",\n\t});\n\tconst [openSuccessSnackbar, setOpenSuccessSnackbar] = useState({\n\t\topen: false,\n\t\tmessage: \"\",\n\t});\n\treturn (\n\t\t<div>\n\t\t\t<ErrSnackbar\n\t\t\t\topenCfg={openErrSnackbar}\n\t\t\t\tonClose={() => setOpenErrSnackbar({ open: false, message: \"\" })}\n\t\t\t/>\n\t\t\t<SuccessSnackbar\n\t\t\t\topenCfg={openSuccessSnackbar}\n\t\t\t\tonClose={() => setOpenSuccessSnackbar({ open: false, message: \"\" })}\n\t\t\t/>\n\t\t\t<AddMoneyForm\n\t\t\t\tonClick={(validValToAdd) => {\n\t\t\t\t\tsetDisabledForms(true);\n\t\t\t\t\taddMoney(validValToAdd)\n\t\t\t\t\t\t.then((newMoney) => {\n\t\t\t\t\t\t\tprops.updateMoney(newMoney);\n\t\t\t\t\t\t\tsetOpenSuccessSnackbar({\n\t\t\t\t\t\t\t\topen: true,\n\t\t\t\t\t\t\t\tmessage: \"YAY! Nothing went wrong!\",\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((e) =>\n\t\t\t\t\t\t\tsetOpenErrSnackbar({\n\t\t\t\t\t\t\t\topen: true,\n\t\t\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\t\t\te.message === \"RESPONSESTATUSNOTOK\"\n\t\t\t\t\t\t\t\t\t\t? \"You sent an invalid value\"\n\t\t\t\t\t\t\t\t\t\t: \"There's a network problem! Try refreshing the page.\",\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.finally(() => setDisabledForms(false));\n\t\t\t\t}}\n\t\t\t\tdisabled={disabledForms}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default MoneyManager;\n","import React, { useState } from \"react\";\nimport MoneyManager, { MoneyArray } from \"./MoneyManager\";\n\ndeclare global {\n\tinterface Window {\n\t\tmoney: string;\n\t\thtmlentities: {\n\t\t\tencode: (a: string) => string;\n\t\t\tdecode: (a: string) => string;\n\t\t};\n\t}\n}\n\nwindow.htmlentities = {\n\t/**\n\t * Converts a string to its html characters completely.\n\t *\n\t * @param {String} str String with unescaped HTML characters\n\t **/\n\tencode: function (str) {\n\t\tvar buf = [];\n\n\t\tfor (var i = str.length - 1; i >= 0; i--) {\n\t\t\tbuf.unshift([\"&#\", str.charCodeAt(i), \";\"].join(\"\"));\n\t\t}\n\n\t\treturn buf.join(\"\");\n\t},\n\n\t/**\n\t * Converts an html characterSet into its original character.\n\t *\n\t * @param {String} str htmlSet entities\n\t **/\n\tdecode: function (str) {\n\t\treturn str.replace(/&#(\\d+);/g, function (match, dec) {\n\t\t\treturn String.fromCharCode(dec);\n\t\t});\n\t},\n};\n\nif (window.money === \"{{money}}\") {\n\twindow.money = JSON.stringify([\n\t\t{\n\t\t\tdate: new Date().toISOString(),\n\t\t\tvalue: 3.14,\n\t\t},\n\t]);\n}\n\nconst defaultMoney = JSON.parse(\n\twindow.htmlentities.decode(window.money).replaceAll(\"'\", '\"')\n) as MoneyArray;\n\nfunction App() {\n\tconst [money, setMoney] = useState(defaultMoney);\n\treturn (\n\t\t<div>\n\t\t\t<h1>SaveBase</h1>\n\t\t\t<MoneyManager money={money} updateMoney={(newMon) => setMoney(newMon)} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}